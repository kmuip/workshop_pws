const mtoEncryption=require("../lib/MtoEncryption"),MtoRsa=require("../lib/MtoRsa"),forge=require("node-forge"),{PsrSealOpenType:PsrSealOpenType,PsrRights:PsrRights,PsrApiExceptionCode:PsrApiExceptionCode}=require("../psrApiEnums");module.exports=(()=>{function e({maintenance:e,multiFactor:t,service:i},r,n,a,s){this._serviceClient=i,this._multiFactorServiceClient=t,this._psrApi=r,this._sealManager=n,this._rightManager=a,this._roleManager=s,this.keys=null}const t=async function(e,t,i){const r=new MtoRsa;r.privateKeyFromXml(t);const n=await this._serviceClient.getContainerItemWithSecretValue(e.Id,i);return n&&n.Value?forge.util.decodeUtf8(mtoEncryption.DecryptWithPrivateKey(r,n.Value)):null};return e.prototype.encryptDataRightKey=((e,t)=>{if("string"==typeof t){const e=new MtoRsa;e.publicKeyFromXml(t),t=e}return e?mtoEncryption.EncryptWithPublicKey(t,e):null}),e.prototype.decryptContainerItem=async function(e,i){if(!e.IsEncrypted())return Promise.resolve("");const r=await this._rightManager.getLegitimateDataRights(e.Id);if(!r.length)return"";let n=function(e){if(!e||!e.length)return;if(!this.keys)return;const t=e.find(e=>e.RightKey&&!e.SealId&&this.keys.some(t=>t.id===e.LegitimateId));if(!t)return;const i=this.keys.find(e=>e.id===t.LegitimateId);return i?mtoEncryption.DecryptWithPrivateKey(i.rsa,t.RightKey):void 0}.bind(this)(r);if(!n){const a=r.filter(e=>!!e.SealId).map(t=>this.decryptDataRightWithSeal(e,t));return Promise.all(a).then(r=>{if(!(r=r.filter(e=>!!e)).length)throw new Error(PsrApiExceptionCode.RightNoKey);return n=r[0],t.bind(this)(e,n,i)})}return t.bind(this)(e,n,i)},e.prototype.encryptContainerItem=((e,t)=>{if(!e)return;let i;"string"!=typeof t&&(t="");const r=new MtoRsa;e.PublicKey?r.publicKeyFromXml(e.PublicKey):(r.generateKeyPair(),i=r.privateKeyToXml());const n=mtoEncryption.EncryptWithPublicKey(r,forge.util.encodeUtf8(t));return e.PublicKey=r.publicKeyToXml(),e.Value=n,i}),e.prototype.initializeUserKeys=async function(e){if(this.keys)return;this.keys=[];const t=this._multiFactorServiceClient.getCurrentUserRightKey(),i=this._psrApi.currentUser.Id,r=[];(await this._roleManager.getUserRoles(i)).forEach(e=>{r.push(this._rightManager.getLegitimateDataRight(e.Id,i,PsrRights.RightRead))});const n=await Promise.all(r),a=await t,s=mtoEncryption.DecryptWithPassword(e,a),o=new MtoRsa;o.privateKeyFromXml(mtoEncryption.Decode(s));const y={id:i,rsa:o,privateKey:forge.util.decode64(s)};this.keys.push(y),n.filter(e=>e&&e.RightKey).forEach(e=>{const t=mtoEncryption.DecryptWithPrivateKey(o,e.RightKey),i=new MtoRsa;i.privateKeyFromXml(t);const r={id:e.DataId,rsa:i,privateKey:t};this.keys.push(r)})},e.prototype.encryptRightKeysAndReturn=async function(e,t){const i=[];return(await this._rightManager.getLegitimateDataRights(e.Id)).forEach(r=>{if(!r.LegitimatePublicKey)return;const n=new MtoRsa;n.publicKeyFromXml(r.LegitimatePublicKey);const a=this.encryptDataRightKey(t,n);i.push({dataId:e.Id,legitimateId:r.LegitimateId,key:a})}),i},e.prototype.decryptDataRight=function(e){if(!e||!e.RightKey)return null;const t=this.keys.find(t=>t.id===e.LegitimateId);return mtoEncryption.DecryptWithPrivateKey(t.rsa,e.RightKey)},e.prototype.decryptDataRightWithSeal=async function(e,t){const i=this._psrApi.currentUser.Id,r=await this._sealManager.breakSeal(t.SealId);if(await this._sealManager.getSealOpenType(r,e.Id,i)===PsrSealOpenType.BrokenExpired)throw new Error("The seal release is expired");return r&&await this._sealManager.hasRelease(r,i)?((e,t,i)=>{if(!e||!t)return null;const r=t.Keys.find(e=>e.KeyReleases.some(e=>!!e.LegitimateSealKey&&r.some(t=>t.id===e.LegitimateId)));if(!r)return null;const n=r.KeyReleases.find(e=>!!e.LegitimateSealKey&&e.LegitimateId===i);if(!n)return null;const a=r.find(e=>e.id===n.LegitimateId);if(!a)return null;const s=e.find(e=>!!e.RightKey&&e.SealId===t.Id&&r.some(t=>t.id===e.LegitimateId));if(!s)return null;try{const e=mtoEncryption.DecryptWithPrivateKey(a.rsa,n.LegitimateSealKey),t=new MtoRsa;return t.privateKeyFromXml(e),mtoEncryption.DecryptWithPrivateKey(t,s.RightKey)}catch(e){return null}})([t],r,i):null},e.prototype.getUserKeys=function(){return this.keys.slice().map(e=>({id:e.id,privateKey:e.privateKey}))},e.prototype.setUserKeys=function(e){this.keys=e.map(e=>{const t=new MtoRsa;return t.privateKeyFromXml(e.privateKey),{id:e.id,privateKey:e.privateKey,rsa:t}})},e})();