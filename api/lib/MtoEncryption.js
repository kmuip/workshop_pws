const{MtoPbkdf2:MtoPbkdf2,MtoPbkdf2GenerateSalt:MtoPbkdf2GenerateSalt}=require("./MtoPbkdf2"),{MtoAes:MtoAes}=require("./MtoAes"),forge=require("node-forge"),DecryptWithPassword=(e,r)=>{if(null==e)return null;if(null==forge)throw new Error("forge.js library required");if(null==r)throw new Error("Cipher required");const t=forge.util.decode64("AQUABQ=="),o=forge.util.decode64(r);try{const r=o.split(t),c=r[1],n=MtoPbkdf2(e,c,1e3,32),d=forge.util.encode64(r[2]),l=new MtoAes(n,d,!0).decrypt(r[3],!1);return forge.util.encode64(l)}catch(e){console.error(e)}},DecryptWithPrivateKey=(e,r)=>{if(null==r)return null;if(null==e)throw new Error("rsa required");if(null==forge)throw new Error("forge.js library required");const t=forge.util.decode64("AQUABQ=="),o=forge.util.decode64(r);try{const r=o.split(t);if(r.length<5)return null;const c=e.decrypt(r[2],!1),n=r[1],d=forge.util.decode64(MtoPbkdf2(c,n,1e3,32)),l=r[3];return new MtoAes(d,l,!1).decrypt(r[4],!1)}catch(e){console.error(e)}},EncryptWithPublicKey=(e,r)=>{try{const t=forge.util.decode64("AQUABQ=="),o=forge.util.decode64("AA=="),c=forge.random.getBytesSync(32),n=MtoPbkdf2GenerateSalt(c,32,1e3,32),d=n.key,l=n.salt,i=e.encrypt(c),u=new MtoAes;u.setKey(forge.util.decode64(d),!1),u.setIv(forge.random.getBytesSync(16),!1);const s=u.encrypt(r,!1);return forge.util.encode64(o+t+forge.util.decode64(l)+t+i+t+u.iv+t+s)}catch(e){console.error(e)}return null},EncryptWithPassword=(e,r)=>{try{const t=forge.util.decode64("AQUABQ=="),o=forge.util.decode64("AQ=="),c=MtoPbkdf2GenerateSalt(e,16,1e3,32),n=c.key,d=c.salt,l=new MtoAes;l.setKey(forge.util.decode64(n),!1),l.setIv(forge.random.getBytesSync(16),!1);const i=l.encrypt(r,!1);return forge.util.encode64(o+t+forge.util.decode64(d)+t+l.iv+t+i)}catch(e){console.error(e)}return null},Decode=e=>forge.util.decode64(e);module.exports.DecryptWithPassword=DecryptWithPassword,module.exports.DecryptWithPrivateKey=DecryptWithPrivateKey,module.exports.EncryptWithPublicKey=EncryptWithPublicKey,module.exports.EncryptWithPassword=EncryptWithPassword,module.exports.Decode=Decode;