const stuff=require("../stuff"),{PsrEntityObjectType:PsrEntityObjectType,PsrRights:PsrRights,PsrBatchRightItemType:PsrBatchRightItemType}=require("../psrApiEnums");module.exports=(()=>{function t({maintenance:t,multiFactor:e,service:i},n,s,r){this._serviceClient=i,this._psrApi=n,this._rightManager=s,this._templateManager=r}const e=(t,e)=>e&&"function"==typeof e?t.DataType()===PsrEntityObjectType.EntityObjectTypeContainerItem&&t.IsEncrypted()?e(t.Id):t.DataType()===PsrEntityObjectType.EntityObjectTypeDocument?e(t.Id):Promise.resolve([]):Promise.resolve([]),i=async function(t,i,n){const s=await this._serviceClient.getOption("OrganisationUnitInheritance",this._psrApi.currentUser);if(s&&"OrganisationUnitInheritanceModeNone"===s.ValueSelectedItem)return[];if(s&&"OrganisationUnitInheritanceModeGroup"===s.ValueSelectedItem&&i===this._psrApi.currentUser.Id)return[];const r=await this._rightManager.getLegitimateDataRights(i);return r.forEach(t=>{t.Rights&=~PsrRights.RightAppend}),async function(t,i,n){const s=[];return i.forEach(e=>{if(e.LegitimateId===this._psrApi.currentUser.Id||e.Legitimate&&"KeyType"in e.Legitimate)return;const i={ItemType:PsrBatchRightItemType.AddLegitimateDataRight,DataId:t.Id,LegitimateId:e.LegitimateId,Rights:e.Rights};s.push(i)}),await this._rightManager.batchUpdateRights(s),n&&"function"==typeof n?e(t,n):[]}.bind(this)(t,r,n)},n=async function(t,n,s,r){if(!t)return[];if(!n)return[];const a=this._psrApi.currentUser;if(0===n.length&&s)return i.bind(this)(t,s,r);const h=[];for(const e of n){if(e.LegitimateId===a.Id)continue;t.DataType()!==PsrEntityObjectType.EntityObjectTypeGroup&&(e.Rights&=~PsrRights.RightAppend),e.LegitimateId===stuff.guidEmpty&&(e.Rights=1);const i={ItemType:PsrBatchRightItemType.AddLegitimateDataRight,DataId:t.Id,LegitimateId:e.LegitimateId,Rights:e.Rights};h.push(i)}await this._rightManager.batchUpdateRights(h);const c=await e(t,r),p={ItemType:PsrBatchRightItemType.RemoveCurrentOrganisationUnitFromRights,DataId:t.Id};return c.push(p),c},s=async function(t){const e=[];return(await Promise.all(t)).forEach(t=>{t.forEach(t=>e.push(t))}),this._rightManager.batchUpdateRights(e)},r=async function(t,e,i,r,a){const h=[];h.push(n.bind(this)(t,e,r,null));const c=t;return c.Items?(r&&r!==stuff.guidEmpty&&a&&a!==stuff.guidEmpty&&c.Items.map(async t=>{const s=await this._templateManager.getDataRightTemplates(r,PsrEntityObjectType.EntityObjectTypeContainerItem,t.BaseContainerItemId,a);return n.bind(this)(t,s&&s.length?s:e,r,i)}).forEach(t=>h.push(t)),c.Items.map(t=>n.bind(this)(t,e,r,i)).forEach(t=>h.push(t)),s.bind(this)(h)):s.bind(this)(h)};return t.prototype.run=function(t,e,i,a,h,c,p){return a||(a=this._psrApi.currentUser.Id),e&&e.length?r.bind(this)(t,e,i,a):h?async function(t,e,i,r,a,h){if(!h)throw new Error("targetId is necessary when using inheritance with template group ID.");const c=[],p=await this._templateManager.getHierarchyDataRightTemplate(i,a,h,r);c.push(n.bind(this)(t,p,i,null));const g=t;if(!g.Items)return s.bind(this)(c);for(let t of g.Items){const s=await this._templateManager.getHierarchyDataRightTemplate(i,PsrEntityObjectType.EntityObjectTypeContainerItem,t.BaseContainerItemId,r);c.push(n.bind(this)(t,s,i,e))}return s.bind(this)(c)}.bind(this)(t,i,a,h,c,p):r.bind(this)(t,[],i,a)},t})();