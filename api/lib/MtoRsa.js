const forge=require("node-forge"),MtoRsa=(()=>{if(null==forge)throw new Error("forge.js library required");const e=function(e){this.privateKey=e,this.publicKey=null},t=forge.jsbn.BigInteger,r=forge.util.createBuffer;function i(e,t){const r=`<${e}>`,i=`</${e}>`,o=t.indexOf(r)+r.length,n=t.indexOf(i,o);return t.substring(o,n)}function o(e){return new t(new r(forge.util.decode64(e)).toHex(),16)}function n(e){return forge.util.encode64(forge.util.hexToBytes(e))}return e.prototype.generateKeyPair=function(){var e=forge.pki.rsa.generateKeyPair({bits:2048,e:65537});this.privateKey=e.privateKey,this.publicKey=e.publicKey},e.prototype.signData=function(e,t,r){if(null==this.privateKey)throw new Error("PrivateKey is not set, use generateKeyPair or privateKeyFromXml to initialize it");var i=forge.md.sha512.create();i.update(e,r);var o=this.privateKey.sign(i);return t?forge.util.encode64(o):o},e.prototype.decrypt=function(e,t){if(null==this.privateKey)throw new Error("PrivateKey is not set, use generateKeyPair or privateKeyFromXml to initialize it");if(null==e)return null;var r=t?forge.util.decode64(e):e;return this.privateKey.decrypt(r)},e.prototype.encrypt=function(e,t){if(null==this.publicKey)throw new Error("PublicKey is not set, use generateKeyPair or publicKeyFromXml to initialize it");return null==e?null:(t&&(e=forge.util.decode64(e)),this.publicKey.encrypt(e))},e.prototype.publicKeyToXml=function(){return forge.util.encode64(forge.util.encode64("<RSAKeyValue><Modulus>"+n(this.publicKey.n.toString(16))+"</Modulus><Exponent>"+n(this.publicKey.e.toString(16))+"</Exponent></RSAKeyValue>"))},e.prototype.publicKeyFromXml=function(e){let t=e,r=0;for(;0!==t.indexOf("<")&&r<4;)t=forge.util.decode64(t),r++;var n=forge.pki.setRsaPublicKey(o(i("Modulus",t)),o(i("Exponent",t)));this.publicKey=n},e.prototype.privateKeyToXml=function(){const e=e=>{const t=e.length+(8-e.length%8)%8-e.length;let r="";if(t>0)for(let e=0;e<t;e++)r+="0";return r+e};return forge.util.encode64("<RSAKeyValue><Modulus>"+n(this.privateKey.n.toString(16))+"</Modulus><Exponent>"+n(this.privateKey.e.toString(16))+"</Exponent><P>"+n(this.privateKey.p.toString(16))+"</P><Q>"+n(this.privateKey.q.toString(16))+"</Q><DP>"+n(e(this.privateKey.dP.toString(16)))+"</DP><DQ>"+n(e(this.privateKey.dQ.toString(16)))+"</DQ><InverseQ>"+n(e(this.privateKey.qInv.toString(16)))+"</InverseQ><D>"+n(e(this.privateKey.d.toString(16)))+"</D></RSAKeyValue>")},e.prototype.privateKeyFromXml=function(e){for(var t=0;0!==e.indexOf("<")&&t<4;)e=forge.util.decode64(e),t++;var r=forge.pki.setRsaPrivateKey(o(i("Modulus",e)),o(i("Exponent",e)),o(i("D",e)),o(i("P",e)),o(i("Q",e)),o(i("DP",e)),o(i("DQ",e)),o(i("InverseQ",e)));this.privateKey=r},e})();module.exports=MtoRsa;