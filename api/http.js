const forge=require("node-forge"),{PsrApiExceptionCode:PsrApiExceptionCode}=require("./psrApiEnums");module.exports.makeHttpEndpointUrl=(e=>(0!==(e+="/").indexOf("https://")&&(e="https://"+e),e));const handleSuccess=e=>e.text().then(t=>{try{if(""===t)return;return JSON.parse(t.replace(/^\uFEFF/,""))}catch(r){const o={txt:t,url:e.url};throw Object.setPrototypeOf(o,r),o}}),handleErrorResponse=e=>e.text().then(t=>{const r=JSON.parse(t.replace(/^\uFEFF/,""));throw Object.setPrototypeOf(r,new Error),r.url=e.url,r.status=e.status,r}),handleServerResponse=e=>{if(200===e.status)return handleSuccess(e);if(500===e.status)return handleErrorResponse(e);throw e},handleError=e=>{if(!("status"in e)||502===e.status){const e={ExceptionCode:PsrApiExceptionCode.ConnectionToServerDown};throw Object.setPrototypeOf(e,new Error("The server is unreachable.")),e}if(401===e.status){const e={ExceptionCode:PsrApiExceptionCode.Unauthorized};throw Object.setPrototypeOf(e,new Error("Unauthorized.")),e}throw e};module.exports.makePostData=(e=>(t,r)=>{const o={"content-type":"application/json"};if(null!=t){const e=!t.hasOwnProperty("ClientInstanceId");t=forge.util.encode64(JSON.stringify(t)),e?o.token2=t:o.token=t}return null!=r&&(r=forge.util.encode64(r),o["CSRF-Token"]=r),(t,r)=>e(t,{body:JSON.stringify(r),cache:"no-cache",headers:o,method:"POST",mode:"cors"}).then(handleServerResponse).catch(handleError)}),module.exports.makeGetData=(e=>(t,r)=>{const o={"content-type":"application/json"};if(null!=t){const e=!t.hasOwnProperty("ClientInstanceId");t=forge.util.encode64(JSON.stringify(t)),e?o.token2=t:o.token=t}return null!=r&&(r=forge.util.encode64(r),o["CSRF-Token"]=r),(t,r)=>{if(r){t=t+"?"+new URLSearchParams(Object.entries(r))}return e(t,{cache:"no-cache",headers:o,method:"GET",mode:"cors"}).then(handleServerResponse).catch(handleError)}});